{"mappings":"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","sources":["node_modules/@project-serum/sol-wallet-adapter/src/index.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { PublicKey, Transaction } from '@solana/web3.js';\nimport bs58 from 'bs58';\n\ntype InjectedProvider = { postMessage: (params: unknown) => void };\n\nexport default class Wallet extends EventEmitter {\n  private _providerUrl: URL | undefined;\n  private _injectedProvider?: InjectedProvider;\n  private _publicKey: PublicKey | null = null;\n  private _popup: Window | null = null;\n  private _handlerAdded = false;\n  private _nextRequestId = 1;\n  private _autoApprove = false;\n  private _responsePromises: Map<\n    number,\n    [(value: string) => void, (reason: Error) => void]\n  > = new Map();\n\n  constructor(provider: unknown, private _network: string) {\n    super();\n    if (isInjectedProvider(provider)) {\n      this._injectedProvider = provider;\n    } else if (isString(provider)) {\n      this._providerUrl = new URL(provider);\n      this._providerUrl.hash = new URLSearchParams({\n        origin: window.location.origin,\n        network: this._network,\n      }).toString();\n    } else {\n      throw new Error(\n        'provider parameter must be an injected provider or a URL string.',\n      );\n    }\n  }\n\n  handleMessage = (\n    e: MessageEvent<{\n      id: number;\n      method: string;\n      params: {\n        autoApprove: boolean;\n        publicKey: string;\n      };\n      result?: string;\n      error?: string;\n    }>,\n  ): void => {\n    if (\n      (this._injectedProvider && e.source === window) ||\n      (e.origin === this._providerUrl?.origin && e.source === this._popup)\n    ) {\n      if (e.data.method === 'connected') {\n        const newPublicKey = new PublicKey(e.data.params.publicKey);\n        if (!this._publicKey || !this._publicKey.equals(newPublicKey)) {\n          if (this._publicKey && !this._publicKey.equals(newPublicKey)) {\n            this.handleDisconnect();\n          }\n          this._publicKey = newPublicKey;\n          this._autoApprove = !!e.data.params.autoApprove;\n          this.emit('connect', this._publicKey);\n        }\n      } else if (e.data.method === 'disconnected') {\n        this.handleDisconnect();\n      } else if (e.data.result || e.data.error) {\n        const promises = this._responsePromises.get(e.data.id);\n        if (promises) {\n          const [resolve, reject] = promises;\n          if (e.data.result) {\n            resolve(e.data.result);\n          } else {\n            reject(new Error(e.data.error));\n          }\n        }\n      }\n    }\n  };\n\n  private handleConnect() {\n    if (!this._handlerAdded) {\n      this._handlerAdded = true;\n      window.addEventListener('message', this.handleMessage);\n      window.addEventListener('beforeunload', this._beforeUnload);\n    }\n    if (this._injectedProvider) {\n      return new Promise<void>((resolve) => {\n        void this.sendRequest('connect', {});\n        resolve();\n      });\n    } else {\n      window.name = 'parent';\n      this._popup = window.open(\n        this._providerUrl?.toString(),\n        '_blank',\n        'location,resizable,width=460,height=675',\n      );\n      return new Promise((resolve) => {\n        this.once('connect', resolve);\n      });\n    }\n  }\n\n  private handleDisconnect() {\n    if (this._handlerAdded) {\n      this._handlerAdded = false;\n      window.removeEventListener('message', this.handleMessage);\n      window.removeEventListener('beforeunload', this._beforeUnload);\n    }\n    if (this._publicKey) {\n      this._publicKey = null;\n      this.emit('disconnect');\n    }\n    this._responsePromises.forEach(([, reject], id) => {\n      this._responsePromises.delete(id);\n      reject(new Error('Wallet disconnected'));\n    });\n  }\n\n  private async sendRequest(method: string, params: Record<string, unknown>) {\n    if (method !== 'connect' && !this.connected) {\n      throw new Error('Wallet not connected');\n    }\n    const requestId = this._nextRequestId;\n    ++this._nextRequestId;\n    return new Promise((resolve, reject) => {\n      this._responsePromises.set(requestId, [resolve, reject]);\n      if (this._injectedProvider) {\n        this._injectedProvider.postMessage({\n          jsonrpc: '2.0',\n          id: requestId,\n          method,\n          params: {\n            network: this._network,\n            ...params,\n          },\n        });\n      } else {\n        this._popup?.postMessage(\n          {\n            jsonrpc: '2.0',\n            id: requestId,\n            method,\n            params,\n          },\n          this._providerUrl?.origin ?? '',\n        );\n\n        if (!this.autoApprove) {\n          this._popup?.focus();\n        }\n      }\n    });\n  }\n\n  get publicKey(): PublicKey | null {\n    return this._publicKey;\n  }\n\n  get connected(): boolean {\n    return this._publicKey !== null;\n  }\n\n  get autoApprove(): boolean {\n    return this._autoApprove;\n  }\n\n  async connect(): Promise<void> {\n    if (this._popup) {\n      this._popup.close();\n    }\n    await this.handleConnect();\n  }\n\n  async disconnect(): Promise<void> {\n    if (this._injectedProvider) {\n      await this.sendRequest('disconnect', {});\n    }\n    if (this._popup) {\n      this._popup.close();\n    }\n    this.handleDisconnect();\n  }\n\n  private _beforeUnload = (): void => {\n    void this.disconnect();\n  };\n\n  async sign(\n    data: Uint8Array,\n    display: unknown,\n  ): Promise<{\n    signature: Buffer;\n    publicKey: PublicKey;\n  }> {\n    if (!(data instanceof Uint8Array)) {\n      throw new Error('Data must be an instance of Uint8Array');\n    }\n\n    const response = (await this.sendRequest('sign', {\n      data,\n      display,\n    })) as { publicKey: string; signature: string };\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    return {\n      signature,\n      publicKey,\n    };\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const response = (await this.sendRequest('signTransaction', {\n      message: bs58.encode(transaction.serializeMessage()),\n    })) as { publicKey: string; signature: string };\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    transaction.addSignature(publicKey, signature);\n    return transaction;\n  }\n\n  async signAllTransactions(\n    transactions: Transaction[],\n  ): Promise<Transaction[]> {\n    const response = (await this.sendRequest('signAllTransactions', {\n      messages: transactions.map((tx) => bs58.encode(tx.serializeMessage())),\n    })) as { publicKey: string; signatures: string[] };\n    const signatures = response.signatures.map((s) => bs58.decode(s));\n    const publicKey = new PublicKey(response.publicKey);\n    transactions = transactions.map((tx, idx) => {\n      tx.addSignature(publicKey, signatures[idx]);\n      return tx;\n    });\n    return transactions;\n  }\n\n  async diffieHellman(\n    publicKey: Uint8Array,\n  ): Promise<{ publicKey: Uint8Array; secretKey: Uint8Array }> {\n    if (!(publicKey instanceof Uint8Array)) {\n      throw new Error('Data must be an instance of Uint8Array');\n    }\n    const response = (await this.sendRequest('diffieHellman', {\n      publicKey,\n    })) as {\n      publicKey: Uint8Array;\n      secretKey: Uint8Array;\n    };\n    return response;\n  }\n}\n\nfunction isString(a: unknown): a is string {\n  return typeof a === 'string';\n}\n\nfunction isInjectedProvider(a: unknown): a is InjectedProvider {\n  return (\n    isObject(a) && 'postMessage' in a && typeof a.postMessage === 'function'\n  );\n}\n\nfunction isObject(a: unknown): a is Record<string, unknown> {\n  return typeof a === 'object' && a !== null;\n}\n"],"names":["$6654c429376d4c69$export$2e2bcd8739ae039","EventEmitter","provider","_network","_publicKey","_popup","_handlerAdded","_nextRequestId","_autoApprove","_responsePromises","Map","handleMessage","e","_this","_injectedProvider","source","window","origin","_a","_providerUrl","data","method","newPublicKey","$b9Sku","PublicKey","params","publicKey","equals","handleDisconnect","autoApprove","emit","result","error","promises","get","id","_promises","$gTaKp","slicedToArray","resolve","reject","Error","_beforeUnload","disconnect","a","$6654c429376d4c69$var$isObject","postMessage","$6654c429376d4c69$var$isInjectedProvider","$6654c429376d4c69$var$isString","URL","hash","URLSearchParams","location","network","toString","key","this","addEventListener","Promise","sendRequest","name","open","once","removeEventListener","forEach","param","delete","requestId","connected","set","jsonrpc","Object","assign","_c","_b","_d","focus","close","handleConnect","display","response","signature","Uint8Array","_ctx","sent","$parcel$interopDefault","$jknvx","decode","transaction","message","encode","serializeMessage","addSignature","transactions","signatures","messages","map","tx","s","idx","$IG7SQ"],"version":3,"file":"esm.dc725fef.js.map"}