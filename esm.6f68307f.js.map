{"mappings":"8zBAMqBA,UAAeC,EAAAC,IAwE1BC,sBAMN,OALKC,KAAKC,gBACRD,KAAKC,eAAgB,EACrBC,OAAOC,iBAAiB,UAAWH,KAAKI,eACxCF,OAAOC,iBAAiB,eAAgBH,KAAKK,gBAE3CL,KAAKM,kBACA,IAAIC,SAAeC,IACnBR,KAAKS,YAAY,UAAW,IACjCD,QAGFN,OAAOQ,KAAO,SACdV,KAAKW,OAAST,OAAOU,KACF,QAAjBC,EAAAb,KAAKc,oBAAY,IAAAD,OAAA,EAAAA,EAAEE,WACnB,SACA,2CAEK,IAAIR,SAASC,IAClBR,KAAKgB,KAAK,UAAWR,OAKnBS,mBACFjB,KAAKC,gBACPD,KAAKC,eAAgB,EACrBC,OAAOgB,oBAAoB,UAAWlB,KAAKI,eAC3CF,OAAOgB,oBAAoB,eAAgBlB,KAAKK,gBAE9CL,KAAKmB,aACPnB,KAAKmB,WAAa,KAClBnB,KAAKoB,KAAK,eAEZpB,KAAKqB,kBAAkBC,SAAO,EAAA,CAAKC,GAASC,KAC1CxB,KAAKqB,kBAAkBI,OAAOD,GAC9BD,EAAO,IAAIG,MAAM,2BAIPjB,YAAYkB,EAAgBC,4CACxC,GAAe,YAAXD,IAAyB3B,KAAK6B,UAChC,MAAM,IAAIH,MAAM,wBAElB,MAAMI,EAAY9B,KAAK+B,eAEvB,QADE/B,KAAK+B,eACA,IAAIxB,SAAO,CAAEC,EAASe,iBAC3BvB,KAAKqB,kBAAkBW,IAAIF,EAAW,CAACtB,EAASe,IAC5CvB,KAAKM,kBACPN,KAAKM,kBAAkB2B,YAAY,CACjCC,QAAS,MACTV,GAAIM,SACJH,EACAC,OAAMO,OAAAC,OAAA,CACJC,QAASrC,KAAKsC,UACXV,MAII,QAAXf,EAAAb,KAAKW,cAAM,IAAAE,GAAAA,EAAEoB,YACX,CACEC,QAAS,MACTV,GAAIM,SACJH,SACAC,GAEuB,QAAzBW,EAAiB,QAAjBC,EAAAxC,KAAKc,oBAAY,IAAA0B,OAAA,EAAAA,EAAEC,cAAM,IAAAF,EAAAA,EAAI,IAG1BvC,KAAK0C,aACG,QAAXC,EAAA3C,KAAKW,cAAM,IAAAgC,GAAAA,EAAEC,eAMjBC,gBACF,OAAO7C,KAAKmB,WAGVU,gBACF,OAA2B,OAApB7B,KAAKmB,WAGVuB,kBACF,OAAO1C,KAAK8C,aAGRC,mDACA/C,KAAKW,QACPX,KAAKW,OAAOqC,cAERhD,KAAKD,mBAGPkD,sDACAjD,KAAKM,0BACDN,KAAKS,YAAY,aAAc,KAEnCT,KAAKW,QACPX,KAAKW,OAAOqC,QAEdhD,KAAKiB,sBAODiC,KACJC,EACAC,4CAKA,KAAMD,aAAgBE,YACpB,MAAM,IAAI3B,MAAM,0CAGlB,MAAM4B,QAAkBtD,KAAKS,YAAY,OAAQ,MAC/C0C,UACAC,IAIF,MAAO,WAFWvD,EAAA0D,GAAKC,OAAOF,EAASG,qBACrB,IAAIC,EAAAC,UAAUL,EAAST,eAOrCe,gBAAgBC,4CACpB,MAAMP,QAAkBtD,KAAKS,YAAY,kBAAmB,CAC1DqD,QAASjE,EAAA0D,GAAKQ,OAAOF,EAAYG,sBAE7BP,EAAY5D,EAAA0D,GAAKC,OAAOF,EAASG,WACjCZ,EAAY,IAAIa,EAAAC,UAAUL,EAAST,WAEzC,OADAgB,EAAYI,aAAapB,EAAWY,GAC7BI,KAGHK,oBACJC,4CAEA,MAAMb,QAAkBtD,KAAKS,YAAY,sBAAuB,CAC9D2D,SAAUD,EAAaE,KAAKC,GAAOzE,EAAA0D,GAAKQ,OAAOO,EAAGN,wBAE9CO,EAAajB,EAASiB,WAAWF,KAAKG,GAAM3E,EAAA0D,GAAKC,OAAOgB,KACxD3B,EAAY,IAAIa,EAAAC,UAAUL,EAAST,WAKzC,OAJAsB,EAAeA,EAAaE,KAAG,CAAEC,EAAIG,KACnCH,EAAGL,aAAapB,EAAW0B,EAAWE,IAC/BH,QAKLI,cACJ7B,4CAEA,KAAMA,aAAqBQ,YACzB,MAAM,IAAI3B,MAAM,0CAQlB,aANwB1B,KAAKS,YAAY,gBAAiB,WACxDoC,mBA/NQ8B,EAA2BrC,GAErC,GADAsC,QADqC5E,KAAAsC,SAAAA,EAV/BtC,KAAAmB,WAA+B,KAC/BnB,KAAAW,OAAwB,KACxBX,KAAAC,eAAgB,EAChBD,KAAA+B,eAAiB,EACjB/B,KAAA8C,cAAe,EACf9C,KAAAqB,kBAGJ,IAAIwD,IAmBR7E,KAAAI,cACE0E,UAWA,GACG9E,KAAKM,mBAAqBwE,EAAEC,SAAW7E,QACvC4E,EAAErC,UAA4B,QAAjB5B,EAAAb,KAAKc,oBAAY,IAAAD,OAAA,EAAAA,EAAE4B,SAAUqC,EAAEC,SAAW/E,KAAKW,OAE7D,GAAsB,cAAlBmE,EAAE3B,KAAKxB,OAAwB,CACjC,MAAMqD,EAAe,IAAItB,EAAAC,UAAUmB,EAAE3B,KAAKvB,OAAOiB,WAC5C7C,KAAKmB,YAAenB,KAAKmB,WAAW8D,OAAOD,KAC1ChF,KAAKmB,aAAenB,KAAKmB,WAAW8D,OAAOD,IAC7ChF,KAAKiB,mBAEPjB,KAAKmB,WAAa6D,EAClBhF,KAAK8C,eAAiBgC,EAAE3B,KAAKvB,OAAOc,YACpC1C,KAAKoB,KAAK,UAAWpB,KAAKmB,kBAEvB,GAAsB,iBAAlB2D,EAAE3B,KAAKxB,OAChB3B,KAAKiB,wBACA,GAAI6D,EAAE3B,KAAK+B,QAAUJ,EAAE3B,KAAKgC,MAAO,CACxC,MAAMC,EAAWpF,KAAKqB,kBAAkBgE,IAAIP,EAAE3B,KAAK3B,IACnD,GAAI4D,EAAU,CACZ,MAAO5E,EAASe,GAAU6D,EACtBN,EAAE3B,KAAK+B,OACT1E,EAAQsE,EAAE3B,KAAK+B,QAEf3D,EAAO,IAAIG,MAAMoD,EAAE3B,KAAKgC,WAgH1BnF,KAAAK,cAAa,KACdL,KAAKiD,uBAuEcqC,GAC1B,gBAKgBA,GAChB,MAAoB,iBAANA,GAAwB,OAANA,EAL9BC,CAASD,IAAM,gBAAiBA,GAA8B,mBAAlBA,EAAErD,YA5O1CuD,CAAmBb,GACrB3E,KAAKM,kBAAoBqE,MACpB,CAAA,aAoOOW,GAChB,MAAoB,iBAANA,EArODG,CAASd,GAOlB,MAAM,IAAIjD,MACR,oEAPF1B,KAAKc,aAAe,IAAI4E,IAAIf,GAC5B3E,KAAKc,aAAa6E,KAAO,IAAIC,gBAAgB,CAC3CnD,OAAQvC,OAAO2F,SAASpD,OACxBJ,QAASrC,KAAKsC,WACbvB","sources":["node_modules/@project-serum/sol-wallet-adapter/src/index.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { PublicKey, Transaction } from '@solana/web3.js';\nimport bs58 from 'bs58';\n\ntype InjectedProvider = { postMessage: (params: unknown) => void };\n\nexport default class Wallet extends EventEmitter {\n  private _providerUrl: URL | undefined;\n  private _injectedProvider?: InjectedProvider;\n  private _publicKey: PublicKey | null = null;\n  private _popup: Window | null = null;\n  private _handlerAdded = false;\n  private _nextRequestId = 1;\n  private _autoApprove = false;\n  private _responsePromises: Map<\n    number,\n    [(value: string) => void, (reason: Error) => void]\n  > = new Map();\n\n  constructor(provider: unknown, private _network: string) {\n    super();\n    if (isInjectedProvider(provider)) {\n      this._injectedProvider = provider;\n    } else if (isString(provider)) {\n      this._providerUrl = new URL(provider);\n      this._providerUrl.hash = new URLSearchParams({\n        origin: window.location.origin,\n        network: this._network,\n      }).toString();\n    } else {\n      throw new Error(\n        'provider parameter must be an injected provider or a URL string.',\n      );\n    }\n  }\n\n  handleMessage = (\n    e: MessageEvent<{\n      id: number;\n      method: string;\n      params: {\n        autoApprove: boolean;\n        publicKey: string;\n      };\n      result?: string;\n      error?: string;\n    }>,\n  ): void => {\n    if (\n      (this._injectedProvider && e.source === window) ||\n      (e.origin === this._providerUrl?.origin && e.source === this._popup)\n    ) {\n      if (e.data.method === 'connected') {\n        const newPublicKey = new PublicKey(e.data.params.publicKey);\n        if (!this._publicKey || !this._publicKey.equals(newPublicKey)) {\n          if (this._publicKey && !this._publicKey.equals(newPublicKey)) {\n            this.handleDisconnect();\n          }\n          this._publicKey = newPublicKey;\n          this._autoApprove = !!e.data.params.autoApprove;\n          this.emit('connect', this._publicKey);\n        }\n      } else if (e.data.method === 'disconnected') {\n        this.handleDisconnect();\n      } else if (e.data.result || e.data.error) {\n        const promises = this._responsePromises.get(e.data.id);\n        if (promises) {\n          const [resolve, reject] = promises;\n          if (e.data.result) {\n            resolve(e.data.result);\n          } else {\n            reject(new Error(e.data.error));\n          }\n        }\n      }\n    }\n  };\n\n  private handleConnect() {\n    if (!this._handlerAdded) {\n      this._handlerAdded = true;\n      window.addEventListener('message', this.handleMessage);\n      window.addEventListener('beforeunload', this._beforeUnload);\n    }\n    if (this._injectedProvider) {\n      return new Promise<void>((resolve) => {\n        void this.sendRequest('connect', {});\n        resolve();\n      });\n    } else {\n      window.name = 'parent';\n      this._popup = window.open(\n        this._providerUrl?.toString(),\n        '_blank',\n        'location,resizable,width=460,height=675',\n      );\n      return new Promise((resolve) => {\n        this.once('connect', resolve);\n      });\n    }\n  }\n\n  private handleDisconnect() {\n    if (this._handlerAdded) {\n      this._handlerAdded = false;\n      window.removeEventListener('message', this.handleMessage);\n      window.removeEventListener('beforeunload', this._beforeUnload);\n    }\n    if (this._publicKey) {\n      this._publicKey = null;\n      this.emit('disconnect');\n    }\n    this._responsePromises.forEach(([, reject], id) => {\n      this._responsePromises.delete(id);\n      reject(new Error('Wallet disconnected'));\n    });\n  }\n\n  private async sendRequest(method: string, params: Record<string, unknown>) {\n    if (method !== 'connect' && !this.connected) {\n      throw new Error('Wallet not connected');\n    }\n    const requestId = this._nextRequestId;\n    ++this._nextRequestId;\n    return new Promise((resolve, reject) => {\n      this._responsePromises.set(requestId, [resolve, reject]);\n      if (this._injectedProvider) {\n        this._injectedProvider.postMessage({\n          jsonrpc: '2.0',\n          id: requestId,\n          method,\n          params: {\n            network: this._network,\n            ...params,\n          },\n        });\n      } else {\n        this._popup?.postMessage(\n          {\n            jsonrpc: '2.0',\n            id: requestId,\n            method,\n            params,\n          },\n          this._providerUrl?.origin ?? '',\n        );\n\n        if (!this.autoApprove) {\n          this._popup?.focus();\n        }\n      }\n    });\n  }\n\n  get publicKey(): PublicKey | null {\n    return this._publicKey;\n  }\n\n  get connected(): boolean {\n    return this._publicKey !== null;\n  }\n\n  get autoApprove(): boolean {\n    return this._autoApprove;\n  }\n\n  async connect(): Promise<void> {\n    if (this._popup) {\n      this._popup.close();\n    }\n    await this.handleConnect();\n  }\n\n  async disconnect(): Promise<void> {\n    if (this._injectedProvider) {\n      await this.sendRequest('disconnect', {});\n    }\n    if (this._popup) {\n      this._popup.close();\n    }\n    this.handleDisconnect();\n  }\n\n  private _beforeUnload = (): void => {\n    void this.disconnect();\n  };\n\n  async sign(\n    data: Uint8Array,\n    display: unknown,\n  ): Promise<{\n    signature: Buffer;\n    publicKey: PublicKey;\n  }> {\n    if (!(data instanceof Uint8Array)) {\n      throw new Error('Data must be an instance of Uint8Array');\n    }\n\n    const response = (await this.sendRequest('sign', {\n      data,\n      display,\n    })) as { publicKey: string; signature: string };\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    return {\n      signature,\n      publicKey,\n    };\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const response = (await this.sendRequest('signTransaction', {\n      message: bs58.encode(transaction.serializeMessage()),\n    })) as { publicKey: string; signature: string };\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    transaction.addSignature(publicKey, signature);\n    return transaction;\n  }\n\n  async signAllTransactions(\n    transactions: Transaction[],\n  ): Promise<Transaction[]> {\n    const response = (await this.sendRequest('signAllTransactions', {\n      messages: transactions.map((tx) => bs58.encode(tx.serializeMessage())),\n    })) as { publicKey: string; signatures: string[] };\n    const signatures = response.signatures.map((s) => bs58.decode(s));\n    const publicKey = new PublicKey(response.publicKey);\n    transactions = transactions.map((tx, idx) => {\n      tx.addSignature(publicKey, signatures[idx]);\n      return tx;\n    });\n    return transactions;\n  }\n\n  async diffieHellman(\n    publicKey: Uint8Array,\n  ): Promise<{ publicKey: Uint8Array; secretKey: Uint8Array }> {\n    if (!(publicKey instanceof Uint8Array)) {\n      throw new Error('Data must be an instance of Uint8Array');\n    }\n    const response = (await this.sendRequest('diffieHellman', {\n      publicKey,\n    })) as {\n      publicKey: Uint8Array;\n      secretKey: Uint8Array;\n    };\n    return response;\n  }\n}\n\nfunction isString(a: unknown): a is string {\n  return typeof a === 'string';\n}\n\nfunction isInjectedProvider(a: unknown): a is InjectedProvider {\n  return (\n    isObject(a) && 'postMessage' in a && typeof a.postMessage === 'function'\n  );\n}\n\nfunction isObject(a: unknown): a is Record<string, unknown> {\n  return typeof a === 'object' && a !== null;\n}\n"],"names":["$70a156e351cad452$export$2e2bcd8739ae039","$parcel$interopDefault","$3XnO0","handleConnect","this","_handlerAdded","window","addEventListener","handleMessage","_beforeUnload","_injectedProvider","Promise","resolve","sendRequest","name","_popup","open","_a","_providerUrl","toString","once","handleDisconnect","removeEventListener","_publicKey","emit","_responsePromises","forEach","reject","id","delete","Error","method","params","connected","requestId","_nextRequestId","set","postMessage","jsonrpc","Object","assign","network","_network","_c","_b","origin","autoApprove","_d","focus","publicKey","_autoApprove","connect","close","disconnect","sign","data","display","Uint8Array","response","$9dTFh","decode","signature","$9i4g4","PublicKey","signTransaction","transaction","message","encode","serializeMessage","addSignature","signAllTransactions","transactions","messages","map","tx","signatures","s","idx","diffieHellman","provider","super","Map","e","source","newPublicKey","equals","result","error","promises","get","a","$70a156e351cad452$var$isObject","$70a156e351cad452$var$isInjectedProvider","$70a156e351cad452$var$isString","URL","hash","URLSearchParams","location"],"version":3,"file":"esm.6f68307f.js.map"}